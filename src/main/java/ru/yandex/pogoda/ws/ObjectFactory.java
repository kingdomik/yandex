//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.02.13 at 08:39:51 PM MSK 
//


package ru.yandex.pogoda.ws;

import javax.xml.bind.annotation.XmlRegistry;


/**
 * This object contains factory methods for each 
 * Java content interface and Java element interface 
 * generated in the ru.yandex.pogoda.ws package. 
 * <p>An ObjectFactory allows you to programatically 
 * construct new instances of the Java representation 
 * for XML content. The Java representation of XML 
 * content can consist of schema derived interfaces 
 * and classes representing the binding of schema 
 * type definitions, element declarations and model 
 * groups.  Factory methods for each of these are 
 * provided in this class.
 * 
 */
@XmlRegistry
public class ObjectFactory {


    /**
     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: ru.yandex.pogoda.ws
     * 
     */
    public ObjectFactory() {
    }

    /**
     * Create an instance of {@link Forecast }
     * 
     */
    public Forecast createForecast() {
        return new Forecast();
    }

    /**
     * Create an instance of {@link Forecast.Day }
     * 
     */
    public Forecast.Day createForecastDay() {
        return new Forecast.Day();
    }

    /**
     * Create an instance of {@link Forecast.Day.Hour }
     * 
     */
    public Forecast.Day.Hour createForecastDayHour() {
        return new Forecast.Day.Hour();
    }

    /**
     * Create an instance of {@link Forecast.Day.DayPart }
     * 
     */
    public Forecast.Day.DayPart createForecastDayDayPart() {
        return new Forecast.Day.DayPart();
    }

    /**
     * Create an instance of {@link Forecast.Day.DayPart.TemperatureData }
     * 
     */
    public Forecast.Day.DayPart.TemperatureData createForecastDayDayPartTemperatureData() {
        return new Forecast.Day.DayPart.TemperatureData();
    }

    /**
     * Create an instance of {@link Forecast.Day.Biomet }
     * 
     */
    public Forecast.Day.Biomet createForecastDayBiomet() {
        return new Forecast.Day.Biomet();
    }

    /**
     * Create an instance of {@link Forecast.Informer }
     * 
     */
    public Forecast.Informer createForecastInformer() {
        return new Forecast.Informer();
    }

    /**
     * Create an instance of {@link Forecast.Yesterday }
     * 
     */
    public Forecast.Yesterday createForecastYesterday() {
        return new Forecast.Yesterday();
    }

    /**
     * Create an instance of {@link Forecast.Fact }
     * 
     */
    public Forecast.Fact createForecastFact() {
        return new Forecast.Fact();
    }

    /**
     * Create an instance of {@link Forecast.Day.MoonPhase }
     * 
     */
    public Forecast.Day.MoonPhase createForecastDayMoonPhase() {
        return new Forecast.Day.MoonPhase();
    }

    /**
     * Create an instance of {@link Forecast.Day.Hour.WeatherCondition }
     * 
     */
    public Forecast.Day.Hour.WeatherCondition createForecastDayHourWeatherCondition() {
        return new Forecast.Day.Hour.WeatherCondition();
    }

    /**
     * Create an instance of {@link Forecast.Day.Hour.Image }
     * 
     */
    public Forecast.Day.Hour.Image createForecastDayHourImage() {
        return new Forecast.Day.Hour.Image();
    }

    /**
     * Create an instance of {@link Forecast.Day.Hour.ImageV2 }
     * 
     */
    public Forecast.Day.Hour.ImageV2 createForecastDayHourImageV2() {
        return new Forecast.Day.Hour.ImageV2();
    }

    /**
     * Create an instance of {@link Forecast.Day.Hour.ImageV3 }
     * 
     */
    public Forecast.Day.Hour.ImageV3 createForecastDayHourImageV3() {
        return new Forecast.Day.Hour.ImageV3();
    }

    /**
     * Create an instance of {@link Forecast.Day.DayPart.WeatherCondition }
     * 
     */
    public Forecast.Day.DayPart.WeatherCondition createForecastDayDayPartWeatherCondition() {
        return new Forecast.Day.DayPart.WeatherCondition();
    }

    /**
     * Create an instance of {@link Forecast.Day.DayPart.Image }
     * 
     */
    public Forecast.Day.DayPart.Image createForecastDayDayPartImage() {
        return new Forecast.Day.DayPart.Image();
    }

    /**
     * Create an instance of {@link Forecast.Day.DayPart.ImageV2 }
     * 
     */
    public Forecast.Day.DayPart.ImageV2 createForecastDayDayPartImageV2() {
        return new Forecast.Day.DayPart.ImageV2();
    }

    /**
     * Create an instance of {@link Forecast.Day.DayPart.ImageV3 }
     * 
     */
    public Forecast.Day.DayPart.ImageV3 createForecastDayDayPartImageV3() {
        return new Forecast.Day.DayPart.ImageV3();
    }

    /**
     * Create an instance of {@link Forecast.Day.DayPart.Pressure }
     * 
     */
    public Forecast.Day.DayPart.Pressure createForecastDayDayPartPressure() {
        return new Forecast.Day.DayPart.Pressure();
    }

    /**
     * Create an instance of {@link Forecast.Day.DayPart.MslpPressure }
     * 
     */
    public Forecast.Day.DayPart.MslpPressure createForecastDayDayPartMslpPressure() {
        return new Forecast.Day.DayPart.MslpPressure();
    }

    /**
     * Create an instance of {@link Forecast.Day.DayPart.TemperatureData.Avg }
     * 
     */
    public Forecast.Day.DayPart.TemperatureData.Avg createForecastDayDayPartTemperatureDataAvg() {
        return new Forecast.Day.DayPart.TemperatureData.Avg();
    }

    /**
     * Create an instance of {@link Forecast.Day.Biomet.Message }
     * 
     */
    public Forecast.Day.Biomet.Message createForecastDayBiometMessage() {
        return new Forecast.Day.Biomet.Message();
    }

    /**
     * Create an instance of {@link Forecast.Informer.Temperature }
     * 
     */
    public Forecast.Informer.Temperature createForecastInformerTemperature() {
        return new Forecast.Informer.Temperature();
    }

    /**
     * Create an instance of {@link Forecast.Yesterday.Station }
     * 
     */
    public Forecast.Yesterday.Station createForecastYesterdayStation() {
        return new Forecast.Yesterday.Station();
    }

    /**
     * Create an instance of {@link Forecast.Yesterday.Temperature }
     * 
     */
    public Forecast.Yesterday.Temperature createForecastYesterdayTemperature() {
        return new Forecast.Yesterday.Temperature();
    }

    /**
     * Create an instance of {@link Forecast.Yesterday.WeatherCondition }
     * 
     */
    public Forecast.Yesterday.WeatherCondition createForecastYesterdayWeatherCondition() {
        return new Forecast.Yesterday.WeatherCondition();
    }

    /**
     * Create an instance of {@link Forecast.Yesterday.Image }
     * 
     */
    public Forecast.Yesterday.Image createForecastYesterdayImage() {
        return new Forecast.Yesterday.Image();
    }

    /**
     * Create an instance of {@link Forecast.Yesterday.ImageV2 }
     * 
     */
    public Forecast.Yesterday.ImageV2 createForecastYesterdayImageV2() {
        return new Forecast.Yesterday.ImageV2();
    }

    /**
     * Create an instance of {@link Forecast.Yesterday.ImageV3 }
     * 
     */
    public Forecast.Yesterday.ImageV3 createForecastYesterdayImageV3() {
        return new Forecast.Yesterday.ImageV3();
    }

    /**
     * Create an instance of {@link Forecast.Yesterday.Pressure }
     * 
     */
    public Forecast.Yesterday.Pressure createForecastYesterdayPressure() {
        return new Forecast.Yesterday.Pressure();
    }

    /**
     * Create an instance of {@link Forecast.Yesterday.MslpPressure }
     * 
     */
    public Forecast.Yesterday.MslpPressure createForecastYesterdayMslpPressure() {
        return new Forecast.Yesterday.MslpPressure();
    }

    /**
     * Create an instance of {@link Forecast.Yesterday.Season }
     * 
     */
    public Forecast.Yesterday.Season createForecastYesterdaySeason() {
        return new Forecast.Yesterday.Season();
    }

    /**
     * Create an instance of {@link Forecast.Fact.Station }
     * 
     */
    public Forecast.Fact.Station createForecastFactStation() {
        return new Forecast.Fact.Station();
    }

    /**
     * Create an instance of {@link Forecast.Fact.Temperature }
     * 
     */
    public Forecast.Fact.Temperature createForecastFactTemperature() {
        return new Forecast.Fact.Temperature();
    }

    /**
     * Create an instance of {@link Forecast.Fact.WeatherCondition }
     * 
     */
    public Forecast.Fact.WeatherCondition createForecastFactWeatherCondition() {
        return new Forecast.Fact.WeatherCondition();
    }

    /**
     * Create an instance of {@link Forecast.Fact.Image }
     * 
     */
    public Forecast.Fact.Image createForecastFactImage() {
        return new Forecast.Fact.Image();
    }

    /**
     * Create an instance of {@link Forecast.Fact.ImageV2 }
     * 
     */
    public Forecast.Fact.ImageV2 createForecastFactImageV2() {
        return new Forecast.Fact.ImageV2();
    }

    /**
     * Create an instance of {@link Forecast.Fact.ImageV3 }
     * 
     */
    public Forecast.Fact.ImageV3 createForecastFactImageV3() {
        return new Forecast.Fact.ImageV3();
    }

    /**
     * Create an instance of {@link Forecast.Fact.Pressure }
     * 
     */
    public Forecast.Fact.Pressure createForecastFactPressure() {
        return new Forecast.Fact.Pressure();
    }

    /**
     * Create an instance of {@link Forecast.Fact.MslpPressure }
     * 
     */
    public Forecast.Fact.MslpPressure createForecastFactMslpPressure() {
        return new Forecast.Fact.MslpPressure();
    }

    /**
     * Create an instance of {@link Forecast.Fact.Season }
     * 
     */
    public Forecast.Fact.Season createForecastFactSeason() {
        return new Forecast.Fact.Season();
    }

}
